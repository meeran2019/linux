
---------------------------------------------------------------------------------------------------------
USER AND ACCOUNT CREATION: 
---------------------------------------------------------------------------------------------------------

---------------------------------------------------------------------------------------------------------
Naming, Permission, Variables, Builtins: 
---------------------------------------------------------------------------------------------------------

    #!/bin/bash         -   represent shebang script. 
    #                   -   to comment a single line. 
    chmod 755           -   to add execute permission to all users. 
    ./                  -   execute script. . represents current dir. / represent divider to the file. 
    sh name.sh          -   execute the script. 

    type -a echo        -   Shell builtin. 
    help echo           -   to get help page for built in shell command. /bin/bash 
    man uptime          -   to get manual help /usr/bin/uptime. 

    WORD='apple'        -   Assigna value to variable. 
    $WORD or ${WORD}    -   To refer the variable. 

    NOTE:   In Variable, ther is NO spaces allowed.
            In Echo, Single quotes prevents expansion of variable. If using variables, use double quotes. 

    ${WORD}ing          -   To append the value to variable then must use ${variable}


---------------------------------------------------------------------------------------------------------
Special variables, Pseudocode, Command Substitution, If Statement and Conditionals: 
---------------------------------------------------------------------------------------------------------

    Builtin Variables: 
        
        $UID                -   returns user id. It is system variable. 
        $BASH               -   Path to BASH binary. 
        $HOME               -   Home directory. 
        $HOSTNAME           -   host name.
        $PIPESTATUS[1]      -   Array variable Hold exit status of last executed foreground pipe. 
        $PWD                -   Present Working Directory. 
        $1 $2               -   Positional parameters passed from command line to script. 
        $?                  -   Gives return code of last executed statement. 
        $0                  -   File name of current script executed. 
        $#                  -   no of arguments passed to script.
        $$                  -   Process number of current shell. 

        man bash (Under Shell Variables)    -   Have complete list of shell variables can use.


    Command Substitution: 

        variable-name=$(commands)           -   Used to execute the command and place in variables.
        FILE-LIST=$(ls -l)
        variable-name=`commands`            -   Use "tick" to execute the command and place in variables.

    If Statement: 

        if [[ condition ]]
        then 
          echo " "
        else
          echo " "
        fi 

        (or)

        if [[condition]];
        then 
            statements;
        else 
            statements;
        fi 

        Operators: 

            -eq     -   equal   -   used for number. 
            -lt     -   less than 
            -gt     -   greater than
            ==      -   equality - used for string. It is BASH command and not POSIX.
            =       -   equal - used for string. It is POSIX and recommended. 
            !=      -   not equal 
            !       -   not 
            -d      -   check existence of directory. 
            -e      -   check existence of file. 
            &&      -   to check AND.  
            ||      -   to check OR. 

        UID 0   -   Assigns to root. 

        
---------------------------------------------------------------------------------------------------------
Exit Status, Return Codes, String Test Conditionals: 
---------------------------------------------------------------------------------------------------------

    Exit Status: 

        if script is successful, it returns exit with 0. If any error, will retuen non zero. 

        exit 1      -   To make failure with given retuen code. 
        exit        -   It stop the execution further. 


---------------------------------------------------------------------------------------------------------
Reading Standard Input: 
---------------------------------------------------------------------------------------------------------

    User can input values to shell script by 2 ways,

        1. In CLI to pass the value as argument. 
        2. Using read method. 

    Standard Input 
    Standard Output 
    Standard Error 

    read -p 'Enter the value: ' VALUE_VARIABLE


---------------------------------------------------------------------------------------------------------
PASSWORD GENERATION AND SHELL SCRIPT ARGUMENTS: 
---------------------------------------------------------------------------------------------------------

---------------------------------------------------------------------------------------------------------
Random Data, Cryptographic Hash Functions, Text and String Manipulation: 
---------------------------------------------------------------------------------------------------------

    Random Data: 

        Builtin Variable  ${RANDOM} used to get the random number from 1 to 6 digit. 

        date +%s        -   format in seconds. + to tell using format.
        date +%N        -   Nano seconds. 

    Hash Functions: 

        Different hash function is used to generate the hash of file or values.
        
        sha256sum, sha1sum, md5sum etc 

        echo "value" | sha256sum | head -c 8 

    Head Function: 

        Used to return the top of the line in file or standard input. 

        head -c  -   no of characters.
        head -n  -   no of lines. 

    echo "helloworld" | fold -1 | shuf | head -c1

    Fold is used to convert single line to multiple line.


---------------------------------------------------------------------------------------------------------
Positional Parameters, Arguments, For Loops & Special Parameters: 
---------------------------------------------------------------------------------------------------------

    Parameter VS Argument: 
        Parameter is variable used inside the shell script.
        Argument is data passed to shell script. 

    $0  -   File name of scrip executed. 

    basename /var/lib/test  -   returns test (NOTE: it wont check whether file or exists or not)
    dirname /var/lib/test   -   returns /var/lib  (NOTE: it wont check whether file or exists or not)

    $#  -   no of arguments passed.
    $*  -   in double quotes, gets arguments as single argument. 
    $@  -   in double quotes, gets argumetns as separate arguments. 

    NOTE: Without quotes, will pass as separate arguments. 

    For Loop: 

        for x in WORDS
        do 
          statements
        done 

---------------------------------------------------------------------------------------------------------
While loop, Infine loop, Shifting and Sleeping: 
---------------------------------------------------------------------------------------------------------

    while condition
    do 
        statements 
    done 

    sleep   -   delays for specific amount of time. 

    true    -   always return successful true with return code as zero.

    shift   -   shift positional parameters. 


---------------------------------------------------------------------------------------------------------

---------------------------------------------------------------------------------------------------------
LINUX PROGRAMMING CONVENTIONS - SHELL SCRIPTING 
---------------------------------------------------------------------------------------------------------

---------------------------------------------------------------------------------------------------------
Advanced Standard input, Standard Output and Standard Error: 
---------------------------------------------------------------------------------------------------------

Standard Input 

    Generally from keyboard. Also from pipes. Also from files. 

Standard Output 

    Output display in screen. 

Standard Error 

    Error display in screen. 


    >   -   Redirect the standard output. It will OVERRIDE. 
    <   -   Redirect the standard input. 
    >>  -   Redirect the standard output. It will APAPEND.

    echo "Hello World!" > hello.txt     -   standard output.
    READ LINE < hello.txt               -   standard input. 

File Descriptor: 

    0   STDIN   
    1   STDOUT 
    2   STDERR
    &   BOTH STDOUT & STDERR 

    read x < hello.txt  (or) read x 0< hello.txt  ->   If 0 is not mentioned, system assume it as zero with STDIN. 

    echo "hello" > hello.txt (or) echo "hello" 1> hello.txt  -> In standard output, if 1 is not mentioned, default assumes as 1. If any error, will not redirect and show in screen. 

    echo "hello" 2> hello.error     -> redirects standard error to file but display output in screen.

    echo "hello" 2> hello.error 1> hello.output     -> Redirects both standard output and error to file.

    echo "hello" 2>> hello.error 1>> hello.output     -> Redirects both standard output and error to file. Append to the file. 

    2>&1  or 2>>&1  -> redirects both standard output and error in same file. 

    &> or &>>       -> redirects both standard output and error in same file. 

    |&              -> In pipe used to redirect both output and error. 

    /dev/null       -> Write to null file. 


---------------------------------------------------------------------------------------------------------
PARSING COMMAND LINE OPTIONS 
---------------------------------------------------------------------------------------------------------

---------------------------------------------------------------------------------------------------------
Case Statements: 
---------------------------------------------------------------------------------------------------------

    Case is execute commands based on pattern matching. 

        case WORD in 
            pattern) 
                statements 
            ;; 
            pattern2 | pattern3) 
                statements 
            ;; 
            *) 
                statements 
        esac 

    Pattern Matching: 

        *       -   matches any character 
        ?       -   matches single character 
        [...]   -   matches any one of enclosed characters. 

    
---------------------------------------------------------------------------------------------------------
Functions: 
---------------------------------------------------------------------------------------------------------

    Function is used to DRY (Dont Repeat Yourself) code. 
    Function will be called and avoid multiple lines of code. 

    function function-name 
    { commands ; }

    function-name()
    { commands ; return 1 }

    local variable-name=value       -   This is local scope only to the function.
    readonly variable-name=value    -   variable cannot be modified. 

    Logger: 
        Enter messages into system log. /var/log/message file. 

        logger options message 
        logger -t shell-script "message"

    if [[ -f $VARIABLE1 ]]      -   checks whether variable exists. 
    then 

    cp -p       -   -p preservers original value like timestamp, permission etc. 



---------------------------------------------------------------------------------------------------------
Parsing Command Line Options with getopts: 
---------------------------------------------------------------------------------------------------------

    It is used to parse positional parameters as options.

    It helps to give user different options and based on argument, program behaviour will change.

    getopts optstring name [arg]

    $OPTARG     -   places the argument in variable. 

    :           -   parameter is mandatory
    ::          -   parameter is optional 

    $(( 6 / 4 ))        -   arithmetic expression. Returns 1. 
    $(( VARA + VARB ))  -   can use variable 
    $(( VARA++ ))       -   increment variable by 1
    $(( VARA-- ))       - decrement variable by 1
    $(( VAR +=5 ))

    let , expr          -   another utility for arithmetic expressions. 

    $OPTIND             -   Index of next argument to be processed, starts from 1.

    bc          -   basic calculator, used for floating point arithmetic. 


---------------------------------------------------------------------------------------------------------
Deleting and Disabling Linux Accounts: 
---------------------------------------------------------------------------------------------------------

    userdel -f user     -   force delete 
    userdel user        -   delete user 


---------------------------------------------------------------------------------------------------------
TRANSFORMING DATA, DATA PROCESSING AND REPORTING: 
---------------------------------------------------------------------------------------------------------

---------------------------------------------------------------------------------------------------------
Cut and Awk: 
---------------------------------------------------------------------------------------------------------

CUT: 

    Removes sections (columns) from each of line. 

    -c5     character.  displays 5th character. 
    -c 4-7  displays range from 4th to 7th position. 
    -c 4-   displays from range 4 till end of line. 
    -c -4   displays upto 4 characters. 
    -c 1,3,5    displays 1st, 3rd, 5th character. 

    -b      bytes 
    -f      fields 
    -d      delimeter 

    echo -e "hello \t world'        -   to use 'e' so backslash will be expanded. 
    -f 1            -   default takes delimeter as TAB. 
    -d , -f 1       -   upto delimeter consider first field and after second field. 
    -d ',' -f 1     -   upto delimeter consider first field and after second field. 
                        If special character, use in double quote.

    --output-delimeter=','  -   input delimter is replaced with output delimeter. 

    grep '^first'           -   start with first.
    grep "last$"            -   ends with end


AWK: 

    Pattern scanning and text processing language.

    awk -F ':' '{print $1,$3}' /etc/passwd              -   no delimter in output. 
    awk -F ':' -v OFS=',' '{print $1,$3}' /etc/passwd   -   keep given delimeter.
    awk -F ':' '{print $1 "," $3}' /etc/passwd   -   keep given delimeter in other format.

    awk '$print $(NF - 3) '     -   To get 3rd field from last. 


---------------------------------------------------------------------------------------------------------
Open Network Ports: 
---------------------------------------------------------------------------------------------------------

    sudo netstat -ntlp | grep -i ':' | awk '{print $4}' | awk -F ':' '{print $NF}' 

    netstat -ntlp 
        n - numeric display (ssh to 22)
        l - listen 
        p - port 
        t - tcp 
        u - udp 

---------------------------------------------------------------------------------------------------------
Sort and Uniq: 
---------------------------------------------------------------------------------------------------------

Sort: 

    It is sort a line of text files. 

    sort file-name      -   sort the file alphabetically from a..z.
    sort -r file-name   -   sort in reverse order z..a 
    sort -h             -   sort and display in human readable format. useful in du and df commands.
    sort -u             -   sort and keep UNIQUE.

    cut -d ':' -f 3 /etc/passwd | sort -r       -   standard input for reverse. 
    cut -d ':' -f 3 /etc/passwd | sort          -   standard input for sorting. 
    cut -d ':' -f 3 /etc/passwd | sort -n       -   numeric sorting. 
    cut -d ':' -f 3 /etc/passwd | sort -rn      -   numeric reverse sorting. 

    du vs df: 

        du - disk used is space used under a particular directory or files in file system.
        df - display amount of available disk space.

Uniq: 

    It works only on sorted files.
    If unsorted it will not work. 

    sudo netstat -ntlp | grep -i ':' | awk '{print $4}' | awk -F ':' '{print $NF}' | sort -n | uniq

    sudo netstat -ntlp | grep -i ':' | awk '{print $4}' | awk -F ':' '{print $NF}' | sort -n | uniq -c -> No of times the value occured. To get occurances.

wc: 

    It is word count. 
    wc -l   -   line counts. 
    wc -c   -   byte counts 
    wc -m   -   char counts.
    wc -w   -   word counts 
    wc      -   gives no of lines, words & characters. 

geoiplookup: 

    geoiplookup ip-address 


sed: 

    It is Stream Editor.

    s   -   substitute 

    sed 's/source/target/flags' file-name        -   display changed value, not update original file.

    By default, sed if find the search pattern in line, it will replace and subsequent search pattern on same line will be ignored. Flag g can be used to search in all. Flag 2 will replace only 2nd occurance.

    It performs text transformation on streams like standard input, output or error. 

    It does like substitute, appennd, remove, insert or remove lines. 

    sed 's/test2/seddd/' user.err       -   substitute. NOTE: IT only changes in display outpu and also first occurence only. 
    sed 's/test2/seddd/' user.err > user.err.sed    -   Write display output to separate file.
    sed 's/test2/seddd/1' user.err      -   It looks for replacement in first occurance.
    sed 's/test2/seddd/3' user.err      -   It looks for replacement in third occurance.
    sed 's/test2/seddd/i' user.err      -   case sensitive 
    sed 's/search-pattern/replace-pattern/g'    -   It replace all values not only first occurence. 
    sed -i 's\search\replace'           -   inplace update and update in original file. 
    sed -i.bak 's\search\replace'       -   backup original file as .bat and inplace update in original file. 
    sed 's/search/replace/gw like.txt' love.txt     -   creates new file like.txt 
    sed 's/\/home\/user/\/home\/updated/'    -   Incase / used then can use escaping character with \ followed by /.
    Can use # or : to replace as delimeter instaed of \.

    sed'/search/d'      -   delete the searched line. 
    sed '^#/d'          -   ^ checks first line and delete starts with # (comments).
    sed '^$/d'          -   ^$ means blank line. 
    sed '^#/d;^$/d'     -   combines both.

    script.sed          -   create the sed file with sed commands inside. 
                            sed -f sed-file-name new-file-name 
    sed '2 s/search/replace/'    -  it only search in 2nd line. 
    sed '2s/search/replace/'        -   it only search in 2nd line. 
    sed '2,4 s/search/replace/'    -  it only search in 2nd and 4th line. 

    sed ' /group/ s/search/replace/ '   -   if a line contains group, only that will do search and replace.


---------------------------------------------------------------------------------------------------------
NETWORKING SCRIPTING & AUTOMATION OF DISTRIBUTED SYSTEMS 
---------------------------------------------------------------------------------------------------------

---------------------------------------------------------------------------------------------------------
Configuring a Mini Network and Scripting for Remote Systems: 
---------------------------------------------------------------------------------------------------------

    ping -c ip-address/host-name        -   send count of 3 packets. 


tee: 

    read from standard input and write to standard output and files. 

    tee -a      -   append 

    NOTE: 
        sudo echo 'test' >> /etc/hosts          -   permission denied due to >> has no sudo access. 
        echo 'test' | sudo tee -a /etc/hosts    -   a appends and tee uses sudo permission.


ssh-keygen  -   generates key pair in default location. /home/user/.ssh/id_rsa or id_rsa.pub 

ssh-copy-id server-name     -   copy the public key to server. 

for SERVER in $(cat server-file)
do 
    ssh ${SERVER} hostname 
    ssh ${SERVER} uptime 
done 

ssh server01 hostname ; hostname        -   2nd host execute on local. 
ssh server01 'hostname ; hostname'      -   with quotes, both execute on remote. 

ssh return exist status as zero if successful or 255 if failure. 

true    -   returns zero (0)
false   -   returns one (1)

sudo ssh server01 id    -   gives sudo permission to execute ssh. 
ssh server01 sudo id    -   gives sudo permission in remote to execute id command. 


---------------------------------------------------------------------------------------------------------

