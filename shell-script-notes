
---------------------------------------------------------------------------------------------------------
USER AND ACCOUNT CREATION: 
---------------------------------------------------------------------------------------------------------

---------------------------------------------------------------------------------------------------------
Naming, Permission, Variables, Builtins: 
---------------------------------------------------------------------------------------------------------

    #!/bin/bash         -   represent shebang script. 
    #                   -   to comment a single line. 
    chmod 755           -   to add execute permission to all users. 
    ./                  -   execute script. . represents current dir. / represent divider to the file. 
    sh name.sh          -   execute the script. 

    type -a echo        -   Shell builtin. 
    help echo           -   to get help page for built in shell command. /bin/bash 
    man uptime          -   to get manual help /usr/bin/uptime. 

    WORD='apple'        -   Assigna value to variable. 
    $WORD or ${WORD}    -   To refer the variable. 

    NOTE:   In Variable, ther is NO spaces allowed.
            In Echo, Single quotes prevents expansion of variable. If using variables, use double quotes. 

    ${WORD}ing          -   To append the value to variable then must use ${variable}


---------------------------------------------------------------------------------------------------------
Special variables, Pseudocode, Command Substitution, If Statement and Conditionals: 
---------------------------------------------------------------------------------------------------------

    Builtin Variables: 
        
        $UID                -   returns user id. It is system variable. 
        $BASH               -   Path to BASH binary. 
        $HOME               -   Home directory. 
        $HOSTNAME           -   host name.
        $PIPESTATUS[1]      -   Array variable Hold exit status of last executed foreground pipe. 
        $PWD                -   Present Working Directory. 
        $1 $2               -   Positional parameters passed from command line to script. 
        $?                  -   Gives return code of last executed statement. 
        $0                  -   File name of current script executed. 
        $#                  -   no of arguments passed to script.
        $$                  -   Process number of current shell. 

        man bash (Under Shell Variables)    -   Have complete list of shell variables can use.


    Command Substitution: 

        variable-name=$(commands)           -   Used to execute the command and place in variables.
        FILE-LIST=$(ls -l)
        variable-name=`commands`            -   Use "tick" to execute the command and place in variables.

    If Statement: 

        if [[ condition ]]
        then 
          echo " "
        else
          echo " "
        fi 

        (or)

        if [[condition]];
        then 
            statements;
        else 
            statements;
        fi 

        Operators: 

            -eq     -   equal   -   used for number. 
            -lt     -   less than 
            -gt     -   greater than
            ==      -   equality - used for string. It is BASH command and not POSIX.
            =       -   equal - used for string. It is POSIX and recommended. 
            !=      -   not equal 
            !       -   not 
            -d      -   check existence of directory. 
            -e      -   check existence of file. 
            &&      -   to check AND.  
            ||      -   to check OR. 

        UID 0   -   Assigns to root. 

        
---------------------------------------------------------------------------------------------------------
Exit Status, Return Codes, String Test Conditionals: 
---------------------------------------------------------------------------------------------------------

    Exit Status: 

        if script is successful, it returns exit with 0. If any error, will retuen non zero. 

        exit 1      -   To make failure with given retuen code. 
        exit        -   It stop the execution further. 


---------------------------------------------------------------------------------------------------------
Reading Standard Input: 
---------------------------------------------------------------------------------------------------------

    User can input values to shell script by 2 ways,

        1. In CLI to pass the value as argument. 
        2. Using read method. 

    Standard Input 
    Standard Output 
    Standard Error 

    read -p 'Enter the value: ' VALUE_VARIABLE


---------------------------------------------------------------------------------------------------------
PASSWORD GENERATION AND SHELL SCRIPT ARGUMENTS: 
---------------------------------------------------------------------------------------------------------

---------------------------------------------------------------------------------------------------------
Random Data, Cryptographic Hash Functions, Text and String Manipulation: 
---------------------------------------------------------------------------------------------------------

    Random Data: 

        Builtin Variable  ${RANDOM} used to get the random number from 1 to 6 digit. 

        date +%s        -   format in seconds. + to tell using format.
        date +%N        -   Nano seconds. 

    Hash Functions: 

        Different hash function is used to generate the hash of file or values.
        
        sha256sum, sha1sum, md5sum etc 

        echo "value" | sha256sum | head -c 8 

    Head Function: 

        Used to return the top of the line in file or standard input. 

        head -c  -   no of characters.
        head -n  -   no of lines. 

    echo "helloworld" | fold -1 | shuf | head -c1

    Fold is used to convert single line to multiple line.


---------------------------------------------------------------------------------------------------------
Positional Parameters, Arguments, For Loops & Special Parameters: 
---------------------------------------------------------------------------------------------------------

    Parameter VS Argument: 
        Parameter is variable used inside the shell script.
        Argument is data passed to shell script. 

    $0  -   File name of scrip executed. 

    basename /var/lib/test  -   returns test (NOTE: it wont check whether file or exists or not)
    dirname /var/lib/test   -   returns /var/lib  (NOTE: it wont check whether file or exists or not)

    $#  -   no of arguments passed.
    $*  -   in double quotes, gets arguments as single argument. 
    $@  -   in double quotes, gets argumetns as separate arguments. 

    NOTE: Without quotes, will pass as separate arguments. 

    For Loop: 

        for x in WORDS
        do 
          statements
        done 

---------------------------------------------------------------------------------------------------------
While loop, Infine loop, Shifting and Sleeping: 
---------------------------------------------------------------------------------------------------------

    while condition
    do 
        statements 
    done 

    sleep   -   delays for specific amount of time. 

    true    -   always return successful true with return code as zero.

    shift   -   shift positional parameters. 


---------------------------------------------------------------------------------------------------------

---------------------------------------------------------------------------------------------------------
LINUX PROGRAMMING CONVENTIONS - SHELL SCRIPTING 
---------------------------------------------------------------------------------------------------------

---------------------------------------------------------------------------------------------------------
Advanced Standard input, Standard Output and Standard Error: 
---------------------------------------------------------------------------------------------------------

